@inject IModalService ModalService
@inject IStoreChainRepository StoreChainRepo
@inject IStoreRepository StoreRepo
@inject IStoreProductCatRepository StoreProductCatRepo

<div class="container">
    <div class="row">
        @if (IsLoading)
        {
            <CustomSpinner>
                Prepare Store data...
            </CustomSpinner>
        }
        else if (IsSorting)
        {
            <CustomSpinner>
                Sorting list...
            </CustomSpinner>
        }
        else
        {
            <EditForm EditContext="editContext">
                @if (!StoreChains.IsNullOrEmpty())
                {
                    <div class="form-group">
                        <label for="storeChainSelect">Store chain</label>
                        <InputSelect id="storeChainSelect" class="form-control"
                                     @bind-Value="SelectedChainId">
                            <option value="">None</option>
                            @foreach (var chain in StoreChains)
                                    {
                                <option value="@chain.StoreChainId">@chain.Name</option>
                                    }
                        </InputSelect>
                    </div>
                }
                <div class="form-group">
                    <label for="storeSelect">Store</label>
                    <InputSelect id="storeSelect" class="form-control" @bind-Value="SelectedStoreId">
                        <option value="">Choose store...</option>
                        @foreach (var store in LocalStores)
                            {
                            <option value="@store.StoreId">
                                @if (!IsChainSelected)
                                    {
                                    @($"{store.Name}, ")
                                    }
                                @store.getAddress()
                            </option>
                            }
                    </InputSelect>
                </div>
                <hr />
                <div class="row">
                    <div class="col">
                        <button type="button" disabled="@(string.IsNullOrEmpty(SelectedStoreId))"
                                class="btn btn-primary" @onclick="OnOkClick">
                            Ok
                        </button>
                    </div>
                    <div class="col">
                        <button type="button" class="btn btn-secondary" @onclick="OnCancelClick">
                            Cancel
                        </button>
                    </div>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter]
    public ShoppingList List { get; set; }

    bool IsLoading;
    bool IsChainSelected;
    bool IsSorting;

    string _selectedChainId;
    string SelectedChainId
    {
        get => _selectedChainId;
        set
        {
            _selectedChainId = value;
            OnStoreChainSelectionChanged();
        }
    }
    string _selectedStoreId;
    string SelectedStoreId
    {
        get => _selectedStoreId;
        set
        {
            _selectedStoreId = value;
        }
    }

    EditContext editContext;

    List<StoreChain> StoreChains = new List<StoreChain>();

    List<Store> DbStores = new List<Store>();
    List<Store> LocalStores = new List<Store>();

    protected async override Task OnInitializedAsync()
    {
        IsLoading = true;
        StoreChains = await StoreChainRepo.GetAllAsync();
        DbStores = await StoreRepo.GetAllAsync();
        LocalStores = new List<Store>(DbStores);

        editContext = new EditContext(this);
        IsLoading = false;
    }

    private void OnStoreChainSelectionChanged()
    {
        IsChainSelected = !string.IsNullOrEmpty(_selectedChainId);
        LocalStores = new List<Store>(DbStores);
        if (IsChainSelected)
        {
            LocalStores = LocalStores
                .Where(s => s.StoreChainId == _selectedChainId)
                .ToList();
        }
    }

    private async Task OnOkClick()
    {
        IsSorting = true;
        var assignmentsOfStore = (await StoreProductCatRepo.GetAssignmentsByStoreIdAsync(SelectedStoreId))
            .OrderBy(a => a.RankingValue).ToList();

        List<ShoppingListItem> sorted = new List<ShoppingListItem>();

        foreach(var assignment in assignmentsOfStore)
        {
            string targetCategoryId = assignment.ProductCategoryId;
            var itemsWithCategory = List.Items.Where(i => i.ProductItem.CategoryId == targetCategoryId)
                .OrderBy(i => i.ProductItem.Name)
                .ToList();
            if (!itemsWithCategory.IsNullOrEmpty())
            {
                sorted.AddRange(itemsWithCategory);
            }
        }

        List.Items = sorted;

        BlazoredModal.Close(ModalResult.Ok<ShoppingList>(List));

        IsSorting = false;
    }
    private void OnCancelClick()
    {
        BlazoredModal.Cancel();
    }

}
