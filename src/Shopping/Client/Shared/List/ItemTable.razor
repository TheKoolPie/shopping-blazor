<table class="table table-sm">
    <thead class="thead-light">
        <tr class="selectable-row">
            <th @onclick="(()=>SortTableByColumn(ShoppingListOverviewTableColumn.Done))">
                <span class="oi oi-circle-check" />
                <span class="@DoneSorting.Icon" />
            </th>
            <th @onclick="(()=>SortTableByColumn(ShoppingListOverviewTableColumn.Name))">
                Name
                <span class="@NameSorting.Icon" />
            </th>
            <th>Amount</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (List.Items.Count > 0)
        {
            @foreach (var item in List.Items)
            {
                var opacity = item.Done ? "1" : "0";
                <tr class="selectable-row">
                    <td @onclick="(() => ToggleDoneStateOfItem(item.Id))">
                        <span style="opacity:@opacity" class="oi oi-circle-check table-check-status"></span>
                    </td>
                    <td @onclick="(() => ToggleDoneStateOfItem(item.Id))"> @item.ProductItem.Name </td>
                    <td @onclick="(() => ToggleDoneStateOfItem(item.Id))"> @item.Amount @item.ProductItem.Unit.GetDisplayName()</td>
                    <td class="d-flex justify-content-start">
                        <ContextMenu>
                            <ContextMenuItem OnClickCallback="@(() => RemoveListItem(item.Id))">
                                Delete
                            </ContextMenuItem>
                        </ContextMenu>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5" class="text-center">No items added</td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public ShoppingList List { get; set; }

    [Parameter]
    public EventCallback<ShoppingList> OnListChanged { get; set; }


    private SortingModel DoneSorting = new SortingModel();
    private SortingModel NameSorting = new SortingModel();

    private async Task ToggleDoneStateOfItem(string id)
    {
        var toggleItem = List.Items.FirstOrDefault(i => i.Id == id);
        if (toggleItem != null)
        {
            toggleItem.Done = !toggleItem.Done;
            await OnListChanged.InvokeAsync(List);
        }
    }
    private async Task RemoveListItem(string id)
    {
        var remItem = List.Items.FirstOrDefault(i => i.Id == id);
        if (remItem != null)
        {
            List.Items.Remove(remItem);
            await OnListChanged.InvokeAsync(List);
        }
    }
    private void SortTableByColumn(ShoppingListOverviewTableColumn column)
    {
        switch (column)
        {
            case ShoppingListOverviewTableColumn.Done:
                {
                    DoneSorting.Toggle();
                    switch (DoneSorting.Type)
                    {
                        case SortingType.Ascending:
                            List.Items = List.Items.OrderBy(e => e.Done).ToList();
                            break;
                        case SortingType.Descending:
                            List.Items = List.Items.OrderByDescending(e => e.Done).ToList();
                            break;
                    }
                }
                break;
            case ShoppingListOverviewTableColumn.Name:
                {
                    NameSorting.Toggle();
                    switch (NameSorting.Type)
                    {
                        case SortingType.Ascending:
                            List.Items = List.Items.OrderBy(e => e.ProductItem.Name).ToList();
                            break;
                        case SortingType.Descending:
                            List.Items = List.Items.OrderByDescending(e => e.ProductItem.Name).ToList();
                            break;
                    }
                }
                break;
        }
    }
}
