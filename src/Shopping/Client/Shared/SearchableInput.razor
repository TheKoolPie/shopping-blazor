<input type="search" class="form-control" id="@_id" autocomplete="off"
       placeholder="@Placeholder" @bind="@SearchValue" @bind:event="oninput" />
@if (_localValueOptions != null && _localValueOptions.Keys.Count > 0)
{
    <div class="input-search-content">

        @foreach (var key in _localValueOptions.Keys)
        {
            <a @onclick="(() => OnItemSelected(key))">@_localValueOptions[key]</a>
        }

    </div>
}


@code {

    private Dictionary<string, string> _localValueOptions;

    private string _searchValue;
    public string SearchValue
    {
        get => _searchValue;
        set
        {
            _searchValue = value;
            OnSearchInputChanged();
        }
    }

    [Parameter]
    public Dictionary<string, string> ValueOptions { get; set; }
    [Parameter]
    public string SelectedValue { get; set; }
    [Parameter]
    public EventCallback<string> SelectedValueChanged { get; set; }
    [Parameter]
    public string Placeholder { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; }

    private string _id = Guid.NewGuid().ToString();

    protected override void OnInitialized()
    {
        if (InputAttributes.ContainsKey("id"))
        {
            _id = InputAttributes["id"].ToString();
        }
    }

    private Task OnItemSelected(string id)
    {
        SelectedValue = id;
        if (!string.IsNullOrEmpty(id))
        {
            _searchValue = _localValueOptions[id];
        }
        _localValueOptions = null;
        return SelectedValueChanged.InvokeAsync(SelectedValue);
    }

    private void OnSearchInputChanged()
    {
        _localValueOptions = null;
        if (!string.IsNullOrEmpty(_searchValue))
        {
            _localValueOptions = new Dictionary<string, string>(ValueOptions);
            _localValueOptions = _localValueOptions
            .Where(k => k.Value.Contains(_searchValue, StringComparison.InvariantCultureIgnoreCase))
            .ToDictionary(x => x.Key, v => v.Value);
        }
        else
        {
            SelectedValue = "";
        }
    }
}
