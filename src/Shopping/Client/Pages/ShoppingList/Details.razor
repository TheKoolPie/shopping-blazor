@page "/shopping-list/details"
@page "/shopping-list/details/{datestring}"

@inject IProducts ProductRepo
@inject IShoppingLists ShoppingListRepo
@inject IShoppingListItems ItemRepo

@attribute [Authorize]

<h3>List for @date.ToString("dd.MM.yyyy")</h3>
<hr />
@if (IsLoading)
{
    <div class="row">
        <div class="col">
            <strong>Loading data...</strong>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col">
            <h5>Add Products to list</h5>
        </div>
        @if (shoppingList != null && shoppingList.IsModified)
        {
            <div class="col">
                <button class="btn btn-success" @onclick="OnSaveList">
                    <span class="oi oi-check"></span> Save list
                </button>
            </div>
        }
    </div>
    <hr />
    <div class="row">
        <div class="col">
            @if (!IsSaving)
            {
                <EditForm EditContext="@editContext" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <div>
                            <input class="form-control" type="search" @bind="ProductSearch" @bind:event="oninput" placeholder="Search for product" />
                            <div class="product-search-content">
                                @if (products != null)
                                {
                                    @if (products.Count > 0)
                                    {
                                        @foreach (var product in products)
                                        {
                                            <a @onclick="@(() => OnProductSelected(product.Id))">@product.Name [@product.Unit.GetDescription()]</a>
                                        }
                                    }
                                }
                            </div>
                        </div>
                    </div>
                    @if (item.ProductItem != null)
                    {
                        <div class="form-group">

                            <div class="input-group mb-3">
                                <InputNumber type="text" class="form-control" @bind-Value="item.Amount" step="0.1" min="0" />
                                <div class="input-group-append">
                                    <span class="input-group-text">[@item.ProductItem.Unit.GetDescription()]</span>
                                </div>
                            </div>

                        </div>
                        <div class="form-group">
                            <button class="btn btn-primary" type="submit">
                                <span class="oi oi-plus"></span> Add
                            </button>
                        </div>
                    }
                </EditForm>
            }
            else
            {
                <strong>Saving data...</strong>
            }
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col">
            <table class="table table-hover table-sm">
                <thead>
                    <tr>
                        <th>  </th>
                        <th>Amount</th>
                        <th>Unit</th>
                        <th>Product</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in shoppingList.Items)
                    {
                        <tr>
                            <td @onclick="@(()=>ToggleItemState(item.Id))"><span style="color:@(item.Done ? "green" : "white")" class="oi oi-circle-check"></span></td>
                            <td @onclick="@(()=>ToggleItemState(item.Id))">@item.Amount</td>
                            <td @onclick="@(()=>ToggleItemState(item.Id))">@item.ProductItem.Unit.GetDescription()</td>
                            <td @onclick="@(()=>ToggleItemState(item.Id))">@item.ProductItem.Name</td>
                            <td>
                                <button class="btn btn-danger btn-sm" @onclick="@(()=>DeleteListItem(item.Id))">
                                    <span class="oi oi-trash" />
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {

    [Parameter]
    public string DateString { get; set; }

    private DateTime date;
    private ShoppingListModel shoppingList = null;

    private List<ProductItem> productBacklog = null;
    private List<ProductItem> products = null;

    private ShoppingListItem item = null;
    private EditContext editContext;

    private bool IsLoading = true;
    private bool IsSaving = false;

    private string productSearch;
    public string ProductSearch
    {
        get => productSearch;
        set
        {
            productSearch = value;
            OnProductSearchInputChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        date = string.IsNullOrEmpty(DateString) ? DateTime.Now.Date : DateTime.Parse(DateString);
        item = new ShoppingListItem(date);
        editContext = new EditContext(item);

        shoppingList = await ShoppingListRepo.GetByDate(date);

        await LoadProducts();

        IsLoading = false;
    }
    //Retrigger load after query string changes
    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }

    private void HandleValidSubmit()
    {
        if (editContext.Validate())
        {
            IsSaving = true;
            shoppingList.AddOrUpdateItem(item);
            item = new ShoppingListItem(date);
            ProductSearch = "";
            IsSaving = false;
        }
    }

    private async Task OnSaveList()
    {
        shoppingList = await ShoppingListRepo.SaveShoppingList(shoppingList);
    }

    private async Task LoadProducts()
    {
        products = null;
        productBacklog = await ProductRepo.GetAllAsync();
    }
    private void OnProductSearchInputChanged()
    {
        item.ProductItem = null;

        products = string.IsNullOrEmpty(productSearch) ? null :
            new List<ProductItem>(productBacklog.Where(p => p.Name.Contains(productSearch, StringComparison.InvariantCultureIgnoreCase)));
    }
    private void OnProductSelected(string id)
    {
        item.ProductItem = productBacklog.FirstOrDefault(p => p.Id == id);
        productSearch = $"{item.ProductItem.Name}";
        products = null;
    }

    private void ToggleItemState(string id)
    {
        shoppingList.ToggleItemDoneState(id);
    }
    private void DeleteListItem(string id)
    {
        shoppingList.RemoveItem(id);
    }
}
