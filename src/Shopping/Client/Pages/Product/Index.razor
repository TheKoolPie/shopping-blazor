@page "/product/"

@inject IProductCategories CategoryRepo
@inject IProducts ProductRepo

<h3>Produkte</h3>

@if (IsLoading)
{
    <div class="row">
        <div class="col">
            <strong>Loading...</strong>
        </div>
    </div>
}
else
{
    <AuthorizeView Context="Auth" Policy="@ShoppingUserPolicies.IsProductModifier">
        <div class="row">
            <div class="col">
                @if (IsSaving)
                {
                    <strong>Speichere Daten....</strong>
                }
                else
                {
                    <EditForm EditContext="@editContext" OnSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="row">
                            <div class="col">
                                <label>
                                    Name
                                    <InputText class="form-control" @bind-Value="product.Name" />
                                </label>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <label>
                                    Unit
                                    <InputSelect class="form-control" @bind-Value="product.Unit">
                                        <option value="0">Choose Unit...</option>
                                        @foreach (var unit in Enum.GetValues(typeof(ProductUnit)).Cast<ProductUnit>())
                                                {
                                            <option value="@unit">@unit.GetDescription()</option>
                                                }
                                    </InputSelect>
                                </label>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col">
                                <label>
                                    Category
                                    <InputSelect class="form-control" @bind-Value="product.CategoryId">
                                        <option value="" selected>Choose Category...</option>
                                        @foreach (var category in categories)
                                                {
                                                    string borderContent = $"15px solid {category.ColorCode}";
                                            <option style="border-left: @borderContent" value="@category.Id">@category.Name</option>
                                                }
                                    </InputSelect>
                                </label>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <button class="btn btn-primary" type="submit">
                                    <span class="oi oi-task" /> Save
                                </button>
                            </div>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
        <div class="row">
            <div class="col">
                <AlertComponent Model="@AlertData" />
            </div>
        </div>
        <hr />
    </AuthorizeView>
    @if (products != null)
    {
        <div class="row">
            <div class="col">
                <input type="search" class="form-control"
                       @bind="SearchInput" @bind:event="oninput"
                       placeholder="Search for product..." />
            </div>
            <div class="col">
                <button class="btn btn-light" @onclick="LoadProductItems">
                    <span class="oi oi-reload" />
                </button>
            </div>
        </div>
        @if (products.Count > 0)
        {
            <div class="row" style="margin-top:24px">
                <div class="col">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th @onclick="OnNameColumnClicked">
                                    Name
                                    <span class="@NameSortingData.Icon" />
                                </th>
                                <th @onclick="OnUnitColumnClicked">
                                    Einheit
                                    <span class="@UnitSortingData.Icon" />
                                </th>
                                <th @onclick="OnCategoryColumnClicked">
                                    Kategorie
                                    <span class="@CategorySortingData.Icon" />
                                </th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in products)
                            {
                                string borderContent = $"15px solid {product.Category.ColorCode}";
                                <tr>
                                    <td>@product.Name</td>
                                    <td>@product.Unit.GetDescription()</td>
                                    <td style="border-left: @borderContent">@product.Category.Name</td>
                                    <td>
                                        <AuthorizeView>
                                            <button class="btn btn-danger" @onclick="@(() => DeleteProduct(product.Id))">
                                                <span class="oi oi-trash" />
                                            </button>
                                        </AuthorizeView>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
        else
        {
            <hr />
            <div class="row">
                <div class="col">
                    <strong>No products found</strong>
                </div>
            </div>
        }
    }
}
@code {

    private AlertComponentModel AlertData;

    private SortingModel NameSortingData = new SortingModel();
    private SortingModel UnitSortingData = new SortingModel();
    private SortingModel CategorySortingData = new SortingModel();

    private ProductItem product = new ProductItem();
    private EditContext editContext;

    private bool IsSaving = false;
    private bool IsLoading = false;

    private string searchInput;
    public string SearchInput
    {
        get => searchInput;
        set
        {
            searchInput = value;
            OnSearchInputChanged();
        }
    }

    private void OnSearchInputChanged()
    {
        products = new List<ProductItem>(localBackup);
        if (!string.IsNullOrEmpty(searchInput))
        {
            products = products.Where(p => p.Name.Contains(searchInput, StringComparison.InvariantCultureIgnoreCase) || p.Category.Name.Contains(searchInput, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }
    }

    private List<ProductCategory> categories = new List<ProductCategory>();
    private List<ProductItem> localBackup = null;
    private List<ProductItem> products = null;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(product);

        IsLoading = true;

        await LoadProductCategories();
        await LoadProductItems();

        SortTable(ProductTableColumn.Name);

        IsLoading = false;
    }

    private async Task HandleSubmit()
    {
        AlertData = null;
        var isValid = editContext.Validate();
        var productExists = localBackup.Any(c => c.Name.Equals(product.Name, StringComparison.InvariantCultureIgnoreCase) || c.Id != product.Id);
        var category = categories.FirstOrDefault(c => c.Id.Equals(product.CategoryId));

        if (isValid)
        {

            if (productExists)
            {
                SavingFailureAlert($"Product with name '{product.Name}' or id '{product.Id}' already exists");
            }
            else
            {
                IsSaving = true;
                product.Name = product.Name.Trim();
                product.Category = category;
                var savedEntity = await ProductRepo.CreateAsync(product);
                if (savedEntity != null)
                {
                    localBackup.Add(savedEntity);
                    products.Add(savedEntity);
                    product = new ProductItem();
                    AlertData = AlertComponentModel.CreateSuccessAlert("Saving successful", "");
                }
                else
                {
                    SavingFailureAlert();
                }
                SortTable(ProductTableColumn.Name);
                IsSaving = false;
            }

        }
    }

    private async Task LoadProductItems()
    {
        localBackup = null;
        products = null;

        localBackup = await ProductRepo.GetAllAsync();
        products = new List<ProductItem>(localBackup);

        SearchInput = null;
    }
    private async Task LoadProductCategories()
    {
        categories = await CategoryRepo.GetAllAsync();
    }


    private async Task DeleteProduct(string id)
    {
        if (!(await ProductRepo.DeleteByIdAsync(id)))
        {
            DeleteFailureAlert();
        }
        await LoadProductItems();
    }

    private void OnNameColumnClicked()
    {
        NameSortingData.Toggle();
        SortTable(ProductTableColumn.Name);
    }
    private void OnUnitColumnClicked()
    {
        UnitSortingData.Toggle();
        SortTable(ProductTableColumn.Unit);
    }
    private void OnCategoryColumnClicked()
    {
        CategorySortingData.Toggle();
        SortTable(ProductTableColumn.Category);
    }

    private void SortTable(ProductTableColumn column)
    {
        switch (column)
        {
            case ProductTableColumn.Name:
                {

                    switch (NameSortingData.Type)
                    {
                        case SortingType.Ascending:
                            products = products.OrderBy(e => e.Name).ToList();
                            break;
                        case SortingType.Descending:
                            products = products.OrderByDescending(e => e.Name).ToList();
                            break;
                    }
                }
                break;
            case ProductTableColumn.Unit:
                {
                    switch (UnitSortingData.Type)
                    {
                        case SortingType.Ascending:
                            products = products.OrderBy(e => e.Unit).ToList();
                            break;
                        case SortingType.Descending:
                            products = products.OrderByDescending(e => e.Unit).ToList();
                            break;
                    }
                }
                break;
            case ProductTableColumn.Category:
                {
                    switch (CategorySortingData.Type)
                    {
                        case SortingType.Ascending:
                            products = products.OrderBy(e => e.Category.Name).ToList();
                            break;
                        case SortingType.Descending:
                            products = products.OrderByDescending(e => e.Category.Name).ToList();
                            break;
                    }
                }
                break;
        }

    }

    private void SavingFailureAlert(string resultMsg = "")
    {
        AlertData = AlertComponentModel.CreateErrorAlert("Error with saving", resultMsg);
    }
    private void DeleteFailureAlert(string resultMsg = "")
    {
        AlertData = AlertComponentModel.CreateErrorAlert("Error with deletion", resultMsg);
    }
}
