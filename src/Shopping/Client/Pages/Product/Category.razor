@page "/product/category"

@inject ILogger<Category> Logger
@inject IProductCategories CategoryRepo

<h3>Product categories</h3>

<div class="row">
    <div class="col">
        @if (IsSaving)
        {
            <strong>Save data....</strong>
        }
        else
        {
            <EditForm EditContext="@editContext" OnSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="col">
                        <label>
                            Name
                            <InputText class="form-control" @bind-Value="category.Name" />
                        </label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label>
                            Color
                            <input class="form-control" type="color" @bind-value="category.ColorCode" />
                        </label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <button class="btn btn-primary" type="submit">
                            <span class="oi oi-task" /> Save
                        </button>
                    </div>
                </div>
            </EditForm>
        }
    </div>
</div>
<div class="row">
    <div class="col">
        @if (AlertData.Title != null)
        {
            <AlertComponent Title="@AlertData.Title" Type="@AlertData.Type">
                @AlertData.Message
            </AlertComponent>
        }
    </div>
</div>
<hr />

@if (categories != null)
{
    @if (categories.Count > 0)
    {
        <div class="row">
            <div class="col">
                <input type="search" class="form-control"
                       @bind="SearchInput" @bind:event="oninput"
                       placeholder="Search for category..." />
            </div>
            <div class="col">
                <button class="btn btn-light" @onclick="LoadProductCategories">
                    <span class="oi oi-reload" />
                </button>
            </div>
        </div>
        <div class="row" style="margin-top:24px">
            <div class="col">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th @onclick="OnTableColumnClicked">
                                Name
                                <span class="@SortingData.Icon" />
                            </th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var category in categories)
                        {
                            string borderContent = $"15px solid {category.ColorCode}";
                            <tr>
                                <td style="border-left: @borderContent">@category.Name</td>
                                <td>
                                    <button class="btn btn-danger" @onclick="@(() => DeleteCategory(category.Id))">
                                        <span class="oi oi-trash" />
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col">
                <strong>No categories available yet...</strong>
            </div>
        </div>
    }
}
else
{
    <div class="row">
        <div class="col">
            Loading data ...
        </div>
    </div>
}



@code {

    private AlertComponentModel AlertData = new AlertComponentModel();
    private SortingModel SortingData = new SortingModel();

    private bool IsSaving = false;

    private string searchInput;
    public string SearchInput
    {
        get => searchInput;
        set
        {
            searchInput = value;
            OnSearchInputChanged();
        }
    }

    private List<ProductCategory> localBackup = null;

    private List<ProductCategory> categories = null;
    private ProductCategory category = new ProductCategory();
    private EditContext editContext;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(category);
        await LoadProductCategories();
    }

    private async Task HandleSubmit()
    {
        var isValid = editContext.Validate();
        var categoryAlreadyExists = localBackup.Any(c => c.Name.Equals(category.Name) || c.ColorCode.Equals(category.ColorCode));
        if (isValid)
        {
            if (!categoryAlreadyExists)
            {
                IsSaving = true;

                var savedEntity = await CategoryRepo.CreateAsync(category);

                if(savedEntity != null)
                {
                    localBackup.Add(savedEntity);
                    categories.Add(savedEntity);
                    category = new ProductCategory();
                }
                else
                {
                    SavingFailureAlert();
                }

                SortTable();
                IsSaving = false;
            }
            else
            {
                SavingFailureAlert("Category name or color already exists");
            }
        }
    }


    private async Task LoadProductCategories()
    {
        localBackup = null;
        categories = null;

        localBackup = await CategoryRepo.GetAllAsync();
        categories = new List<ProductCategory>(localBackup);

        SearchInput = null;

        SortTable();
    }

    private async Task DeleteCategory(string id)
    {
        if (!(await CategoryRepo.DeleteByIdAsync(id)))
        {
            DeleteFailureAlert();
        }
        await LoadProductCategories();
    }

    private void OnSearchInputChanged()
    {
        categories = new List<ProductCategory>(localBackup);
        if (!string.IsNullOrEmpty(searchInput))
        {
            categories = localBackup
                .Where(e => e.Name.Contains(searchInput, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }
    }
    private void OnTableColumnClicked()
    {
        SortingData.Toggle();
        SortTable();
    }
    private void SortTable()
    {
        switch (SortingData.Type)
        {
            case SortingType.Ascending:
                categories = categories.OrderBy(e => e.Name).ToList();
                break;
            case SortingType.Descending:
                categories = categories.OrderByDescending(e => e.Name).ToList();
                break;
        }
    }

    private void SavingFailureAlert(string resultMsg = "")
    {
        AlertData = AlertComponentModel.CreateErrorAlert("Error with saving", $"Could not save {category.Name}: {resultMsg}");
        Logger?.LogError(AlertData.ToString());
    }
    private void DeleteFailureAlert(string resultMsg = "")
    {
        AlertData = AlertComponentModel.CreateErrorAlert("Error with deletion", $"Could not delete {category.Name}: {resultMsg}");
    }
}
