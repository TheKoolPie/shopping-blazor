@page "/product/category"

@inject ILogger<Category> Logger
@inject IProductCategories CategoryRepo

<h3>Product categories</h3>

@if (IsLoading)
{
    <div class="row">
        <div class="col">
            <CustomSpinner>
                Loading categories...
            </CustomSpinner>
        </div>
    </div>
}
else
{


    <AuthorizeView Context="Auth" Policy="@ShoppingUserPolicies.IsProductCategoryModifier">
        <div class="row">
            <div class="col">
                @if (IsSaving)
                {
                    <CustomSpinner>
                        Saving category...
                    </CustomSpinner>
                }
                else
                {
                    <EditForm EditContext="@editContext" OnSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="row">
                            <div class="col">
                                <label>
                                    Name
                                    <InputText class="form-control" @bind-Value="category.Name" />
                                </label>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <label>
                                    Color
                                    <input class="form-control" type="color" @bind-value="category.ColorCode" />
                                </label>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <button class="btn btn-primary" type="submit">
                                    <span class="oi oi-task" /> Save
                                </button>
                            </div>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
        <div class="row">
            <div class="col">
                <AlertComponent Model="@AlertData" />
            </div>
        </div>
        <hr />
    </AuthorizeView>
    @if (categories != null)
    {
        <div class="row">
            <div class="col">
                <input type="search" class="form-control"
                       @bind="SearchInput" @bind:event="oninput"
                       placeholder="Search for category..." />
            </div>
            <div class="col">
                <button class="btn btn-light" @onclick="LoadProductCategories">
                    <span class="oi oi-reload" />
                </button>
            </div>
        </div>
        @if (categories.Count > 0)
        {
            <div class="row" style="margin-top:24px">
                <div class="col">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th @onclick="OnTableColumnClicked">
                                    Name
                                    <span class="@SortingData.Icon" />
                                </th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var category in categories)
                            {
                                string borderContent = $"15px solid {category.ColorCode}";
                                <tr>
                                    <td style="border-left: @borderContent">@category.Name</td>
                                    <td>
                                        <AuthorizeView>
                                            <button class="btn btn-danger" @onclick="@(() => DeleteCategory(category.Id))">
                                                <span class="oi oi-trash" />
                                            </button>
                                        </AuthorizeView>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
        else
        {
            <hr />
            <div class="row">
                <div class="col">
                    <strong>No categories found</strong>
                </div>
            </div>
        }
    }

}



@code {

    private AlertComponentModel AlertData;
    private SortingModel SortingData = new SortingModel();

    private bool IsSaving = false;
    private bool IsLoading = false;

    private string searchInput;
    public string SearchInput
    {
        get => searchInput;
        set
        {
            searchInput = value;
            OnSearchInputChanged();
        }
    }

    private List<ProductCategory> localBackup = null;

    private List<ProductCategory> categories = null;
    private ProductCategory category = new ProductCategory() { ColorCode = "#000000" };
    private EditContext editContext;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(category);

        IsLoading = true;

        await LoadProductCategories();

        SortTable();

        IsLoading = false;
    }

    private async Task HandleSubmit()
    {
        AlertData = null;
        var isValid = editContext.Validate();
        var categoryAlreadyExists = localBackup.Any(c => c.Name.Equals(category.Name, StringComparison.InvariantCultureIgnoreCase) ||
                                                    c.ColorCode.Equals(category.ColorCode, StringComparison.InvariantCultureIgnoreCase));
        if (isValid)
        {
            if (!categoryAlreadyExists)
            {
                IsSaving = true;
                category.Name = category.Name.Trim();
                var savedEntity = await CategoryRepo.CreateAsync(category);

                if (savedEntity != null)
                {
                    localBackup.Add(savedEntity);
                    categories.Add(savedEntity);
                    category = new ProductCategory();
                    AlertData = AlertComponentModel.CreateSuccessAlert("Saving successful", "");
                }
                else
                {
                    SavingFailureAlert();
                }

                SortTable();
                IsSaving = false;
            }
            else
            {
                SavingFailureAlert("Category name or color already exists");
            }
        }
    }


    private async Task LoadProductCategories()
    {
        localBackup = null;
        categories = null;

        localBackup = await CategoryRepo.GetAllAsync();
        categories = new List<ProductCategory>(localBackup);

        SearchInput = null;
    }

    private async Task DeleteCategory(string id)
    {
        if (!(await CategoryRepo.DeleteByIdAsync(id)))
        {
            DeleteFailureAlert();
        }
        await LoadProductCategories();
    }

    private void OnSearchInputChanged()
    {
        categories = new List<ProductCategory>(localBackup);
        if (!string.IsNullOrEmpty(searchInput))
        {
            categories = localBackup
                .Where(e => e.Name.Contains(searchInput, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }
    }
    private void OnTableColumnClicked()
    {
        SortingData.Toggle();
        SortTable();
    }
    private void SortTable()
    {
        switch (SortingData.Type)
        {
            case SortingType.Ascending:
                categories = categories.OrderBy(e => e.Name).ToList();
                break;
            case SortingType.Descending:
                categories = categories.OrderByDescending(e => e.Name).ToList();
                break;
        }
    }

    private void SavingFailureAlert(string resultMsg = "")
    {
        AlertData = AlertComponentModel.CreateErrorAlert("Error with saving", resultMsg);
        Logger?.LogError(AlertData.ToString());
    }
    private void DeleteFailureAlert(string resultMsg = "")
    {
        AlertData = AlertComponentModel.CreateErrorAlert("Error with deletion", resultMsg);
    }
}
