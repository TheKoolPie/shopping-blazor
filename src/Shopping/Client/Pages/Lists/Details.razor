@page "/lists/details/{shoppingListId}"

@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IShoppingLists ShoppingListRepo
@inject IProducts ProductRepo
@inject IUserGroupRepository UserGroupRepo
@inject IUserGroupShoppingLists UserGroupShoppingListsRepo
@inject ICurrentUserProvider CurrentUser

<AlertComponent Model="@LoadingAlertModel" />
@if (LoadingAlertModel == null)
{
    @if (IsLoading)
    {
        <div class="row">
            <div class="col">
                <strong>Loading data...</strong>
            </div>
        </div>
    }
    else
    {
        <h3>Details of @CurrentList.Name</h3>
        <hr />

        <div class="row">
            <div class="col">
                <div class="list-group list-group-horizontal-md" id="list-tab" role="tablist">
                    <a class="list-group-item list-group-item-action active" id="list-overview-list" @onclick="OnListTabClicked"
                       data-toggle="list" href="#list-overview" role="tab">
                        <span class="oi oi-list-rich"></span> Overview
                    </a>
                    <a class="list-group-item list-group-item-action" id="list-addItems-list" @onclick="OnListTabClicked"
                       data-toggle="list" href="#list-addItems" role="tab">
                        <span class="oi oi-plus"></span> Add Items
                    </a>
                    @if (IsOwner)
                    {
                        <a class="list-group-item list-group-item-action" id="list-access-list" @onclick="OnListTabClicked"
                           data-toggle="list" href="#list-access" role="tab">
                            <span class="oi oi-lock-locked"></span> Access
                        </a>
                        <a class="list-group-item list-group-item-action" id="list-properties-list" @onclick="OnListTabClicked"
                           data-toggle="list" href="#list-properties" role="tab">
                            <span class="oi oi-cog"></span> Properties
                        </a>
                    }
                </div>
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col">
                <div class="tab-content" id="nav-tabContent">
                    <div class="tab-pane fade show active" id="list-overview" role="tabpanel" aria-labelledby="list-overview-list">
                        <h4>Overview</h4>
                        <hr />
                        @if (CurrentList != null)
                        {
                            <div class="row">
                                <div class="col">
                                    @if (CurrentList.Items.Count > 0)
                                    {
                                        <table class="table table-hover table-sm">
                                            <thead class="thead-light">
                                                <tr>
                                                    <th></th>
                                                    <th>Name</th>
                                                    <th>Amount</th>
                                                    <th>Unit</th>
                                                    <th></th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var item in CurrentList.Items)
                                                {
                                                    var opacity = item.Done ? "1" : "0";
                                                    <tr>
                                                        <td @onclick="(()=>item.Done = !item.Done)">
                                                            <span style="opacity:@opacity" class="oi oi-circle-check table-check-status"></span>
                                                        </td>
                                                        <td @onclick="(()=>item.Done = !item.Done)"> @item.ProductItem.Name </td>
                                                        <td @onclick="(()=>item.Done = !item.Done)"> @item.Amount </td>
                                                        <td @onclick="(()=>item.Done = !item.Done)"> @item.ProductItem.Unit.GetDescription()</td>
                                                        <td>
                                                            <button type="button" class="btn btn-sm btn-danger" @onclick="@(()=>RemoveListItem(item.Id))">
                                                                <span class="oi oi-trash" />
                                                            </button>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    <div class="tab-pane fade" id="list-addItems" role="tabpanel" aria-labelledby="list-addItems-list">
                        <h4>Add Items</h4>
                        <hr />
                        <AlertComponent Model="AddItemAlertModel" />
                        @if (IsSavingItem)
                        {
                            <div class="row">
                                <div class="col">
                                    <strong>Is saving...</strong>
                                </div>
                            </div>
                        }
                        else
                        {
                            <EditForm EditContext="AddItemEditContext" OnSubmit="HandleAddItemSubmit">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="form-group">
                                    <label for="product-search">Product</label>
                                    <SearchableInput id="product-search"
                                                     ValueOptions="_availableProducts.ToDictionary(x => x.Id, x => x.Name)"
                                                     @bind-SelectedValue="AddItem.ProductItemId"
                                                     Placeholder="Search Products..." />
                                </div>
                                @if (!string.IsNullOrEmpty(AddItem.ProductItemId))
                                {
                                    <div class="form-row">
                                        <div class="col">
                                            <label for="product-amount">Amount</label>
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="col">
                                            <CustomStepper id="product-amount" @bind-StepperValue="@AddItem.Amount" 
                                                           Label="Amount" Increment="@(_availableProducts.FirstOrDefault(p => p.Id == AddItem.ProductItemId)?.Unit.GetStepperIncrement() ?? 0.1f)" 
                                                           Minimum="0" Maximum="(float.MaxValue)" />
                                        </div>
                                        <div class="col-4">
                                            <span class="input-group-text">
                                                @(_availableProducts.FirstOrDefault(p => p.Id == AddItem.ProductItemId)?.Unit.GetDescription() ?? "")
                                            </span>
                                        </div>
                                    </div>
                                    <hr />
                                    <button type="submit" class="btn btn-primary">Add to List</button>
                                }

                            </EditForm>
                        }
                    </div>
                    @if (IsOwner)
                    {
                        <div class="tab-pane fade" id="list-access" role="tabpanel" aria-labelledby="list-access-list">
                            <h4>Access</h4>
                            <hr />
                            <AlertComponent Model="@AccessAlertModel" />

                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="card">
                                        <div class="card-body">
                                            <h5 class="card-title">Create new</h5>
                                            <p class="card-text">Create a new user group and automatically assign it to this list.</p>
                                            <button class="btn btn-primary" type="button" @onclick="CreateAndAssignUserGroup">Create</button>
                                        </div>
                                    </div>
                                </div>
                                @if (_availableGroups != null && _availableGroups.Count > 0)
                                {
                                    <div class="col-sm-6">
                                        <div class="card">
                                            <div class="card-body">
                                                <h5 class="card-title">Add Group to List</h5>
                                                @if (!IsAddingGroup)
                                                {
                                                    <p class="card-text">Search for already existing groups, which belong to you.</p>
                                                    <EditForm EditContext="addGroupContext" OnSubmit="OnAddGroup">
                                                        <div class="form-group">
                                                            <label for="group-search">Available lists</label>
                                                            <InputSelect class="form-control" id="group-search" @bind-Value="groupIdInput.GroupId">
                                                                <option value="">Choose Group...</option>
                                                                @foreach(var list in _availableGroups)
                                                                {
                                                                    <option value="@list.Id">@list.Name</option>
                                                                }
                                                            </InputSelect>
                                                        </div>
                                                        @if (!string.IsNullOrEmpty(groupIdInput.GroupId))
                                                        {
                                                            <button type="submit" class="btn btn-primary">
                                                                <span class="oi oi-plus" /> Assign group
                                                            </button>
                                                        }
                                                    </EditForm>
                                                }
                                                else
                                                {

                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                            <hr />
                            <h6>Assigned groups</h6>
                            <div class="row">
                                <div class="col">
                                    @if (CurrentList.UserGroups != null && CurrentList.UserGroups.Count > 0)
                                    {
                                        <table class="table table-hover">
                                            <thead class="thead-light">
                                                <tr>
                                                    <th>Name</th>
                                                    <th></th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var group in CurrentList.UserGroups)
                                                {
                                                    <tr>
                                                        <td @onclick="@(() => NavigateToUserGroupDetails(group.Id))">@group.Name</td>
                                                        <td>
                                                            <button class="btn btn-danger" type="button" @onclick="@(()=>OnRemoveGroup(group.Id))">
                                                                <span class="oi oi-trash" />
                                                            </button>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    }
                                    else
                                    {
                                        <strong>No user groups assigned</strong>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    @if (IsOwner)
                    {
                        <div class="tab-pane fade" id="list-properties" role="tabpanel" aria-labelledby="list-properties-list">
                            <h4>Properties</h4>
                            <hr />
                            <AlertComponent Model="@PropertyAlertModel" />
                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="card">
                                        <div class="card-body">
                                            <h5 class="card-title">Delete list</h5>
                                            <p class="card-text">
                                                If you delete this list all items will be deleted with it. Also all assignments to groups will be removed.
                                                Please confirm your decision, as this action is not revokeable
                                            </p>
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" @onchange="(()=>showDeleteButton = !showDeleteButton)" value="" id="deleteCheck">
                                                <label class="form-check-label" for="deleteCheck">I really want to to delete!</label>
                                            </div>
                                            @if (showDeleteButton)
                                            {
                                                <hr />
                                                <button type="button" class="btn btn-danger" @onclick="OnDeleteList">
                                                    <span class="oi oi-account-logout" /> Delete group
                                                </button>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public string ShoppingListId { get; set; }

    private bool IsAddingGroup;
    private bool IsLoading { get; set; }

    private ShoppingList CurrentList;

    private bool showDeleteButton = false;

    private bool IsOwner;
    private ShoppingUserModel currentUser;
    private bool CurrentListHasChanged = false;

    private List<UserGroup> _availableGroups;
    private List<ProductItem> _availableProducts = new List<ProductItem>();

    private GroupIdInputModel groupIdInput = new GroupIdInputModel();
    private EditContext addGroupContext;

    #region Alerts
    AlertComponentModel LoadingAlertModel = null;
    AlertComponentModel AddItemAlertModel = null;
    AlertComponentModel AccessAlertModel = null;
    AlertComponentModel PropertyAlertModel = null;
    #endregion

    #region AddItem
    private ShoppingListItem AddItem = new ShoppingListItem();
    private EditContext AddItemEditContext;
    private bool IsSavingItem = false;
    #endregion

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        LoadingAlertModel = null;
        CurrentList = await ShoppingListRepo.GetAsync(ShoppingListId);
        if (CurrentList == null)
        {
            LoadingAlertModel = AlertComponentModel.CreateErrorAlert("Error loading list",
                $"List with id {ShoppingListId} does not exist or it does not belong to you.");
        }
        else
        {
            currentUser = await CurrentUser.GetUserAsync();
            IsOwner = CurrentList.Owner.Id == currentUser.Id;
            if (IsOwner)
            {
                await InitAvailableGroups();
                addGroupContext = new EditContext(groupIdInput);
            }

            await InitAvailableProducts();

            AddItemEditContext = new EditContext(AddItem);
        }

        IsLoading = false;
    }

    private void RemoveListItem(string id)
    {
        var remItem = CurrentList.Items.FirstOrDefault(i => i.Id == id);
        if (remItem != null)
        {
            CurrentList.Items.Remove(remItem);
            CurrentListHasChanged = true;
        }
    }
    private async Task OnSaveListChanges()
    {

    }

    private async Task InitAvailableProducts()
    {
        _availableProducts = await ProductRepo.GetAllAsync();
    }
    private async Task InitAvailableGroups()
    {
        CurrentList.UserGroups = await UserGroupShoppingListsRepo.GetUserGroupsOfShoppingListAsync(ShoppingListId);
        var groupIds = CurrentList.UserGroups.Select(x => x.Id).ToList();
        _availableGroups = (await UserGroupRepo.GetAllAsync())
            .Where(x => !groupIds.Contains(x.Id))
            .ToList();
    }

    private void OnListTabClicked()
    {
        AddItemAlertModel = null;
        AccessAlertModel = null;
        PropertyAlertModel = null;
    }

    private async Task HandleAddItemSubmit()
    {
        IsSavingItem = true;
        AddItemAlertModel = null;
        var createdItem = await ShoppingListRepo.AddOrUpdateItemAsync(CurrentList.Id, AddItem);
        if (createdItem == null)
        {
            AddItemAlertModel = AlertComponentModel.CreateErrorAlert("Could not add item to list");
        }
        else
        {
            AddItemAlertModel = AlertComponentModel.CreateSuccessAlert($"{createdItem.Amount} {createdItem.ProductItem.Unit.GetDescription()} of {createdItem.ProductItem.Name} added");
            CurrentList = await ShoppingListRepo.GetAsync(ShoppingListId);
            await InitAvailableGroups();
            AddItem = new ShoppingListItem();
        }

        IsSavingItem = false;
    }

    private async Task OnAddGroup()
    {
        AccessAlertModel = null;
        if (addGroupContext.Validate())
        {
            IsAddingGroup = true;

            var assignment = new UserGroupShoppingList()
            {
                ShoppingListId = ShoppingListId,
                UserGroupId = groupIdInput.GroupId
            };

            var result = await UserGroupShoppingListsRepo.CreateAssignmentAsync(assignment);

            await InitAvailableGroups();

            AccessAlertModel = result ? AlertComponentModel.CreateSuccessAlert("Assignment successful") :
                AlertComponentModel.CreateErrorAlert("Assignment failed");

            groupIdInput = new GroupIdInputModel();

            IsAddingGroup = false;
        }
    }
    private async Task OnRemoveGroup(string groupId)
    {
        AccessAlertModel = null;
        var assignment = new UserGroupShoppingList()
        {
            ShoppingListId = ShoppingListId,
            UserGroupId = groupId
        };

        var result = await UserGroupShoppingListsRepo.RemoveAssignmentAsync(assignment);

        await InitAvailableGroups();

        AccessAlertModel = result ? AlertComponentModel.CreateSuccessAlert("Assignment removed") :
            AlertComponentModel.CreateErrorAlert("Assignment could not be removed");

    }

    private async Task OnDeleteList()
    {
        if (await ShoppingListRepo.DeleteByIdAsync(ShoppingListId))
        {
            NavigationManager.NavigateTo("/lists");
        }
        else
        {
            PropertyAlertModel = AlertComponentModel.CreateErrorAlert("Could not delete list");
        }
    }

    private void CreateAndAssignUserGroup()
    {
        NavigationManager.NavigateTo($"/groups/create/{ShoppingListId}");
    }
    private void NavigateToUserGroupDetails(string userGroupId)
    {
        NavigationManager.NavigateTo($"/groups/details/{userGroupId}");
    }
}
