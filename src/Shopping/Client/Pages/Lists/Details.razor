@page "/lists/details/{shoppingListId}"

@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IShoppingLists ShoppingListRepo
@inject IUserGroupRepository UserGroupRepo
@inject IUserGroupShoppingLists UserGroupShoppingListsRepo
@inject ICurrentUserProvider CurrentUser
@inject IModalService Modal

<AlertComponent Model="@LoadingAlertModel" />
@if (LoadingAlertModel == null)
{
    @if (IsLoading)
    {
        <div class="row">
            <div class="col">
                <CustomSpinner>
                    Loading shopping list...
                </CustomSpinner>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-auto mr-auto">
                <h4>@CurrentList.Name</h4>
            </div>
            <div class="col-auto">
                <button class="btn btn-light" @onclick="OnSortListByStore">
                    <span class="oi oi-sort-descending" />
                </button>
            </div>
            <div class="col-auto">
                <button class="btn btn-light" @onclick="UpdateCurrentList">
                    <span class="oi oi-reload" />
                </button>
            </div>
        </div>

        <hr />

        <div class="row">
            <div class="col">
                <div class="list-group list-group-horizontal-md" id="list-tab" role="tablist">
                    <a class="list-group-item list-group-item-action active" id="list-overview-list" @onclick="OnListTabClicked"
                       data-toggle="list" href="#list-overview" role="tab">
                        <span class="oi oi-list-rich"></span> Overview
                    </a>
                    @if (IsOwner)
                    {
                        <a class="list-group-item list-group-item-action" id="list-properties-list" @onclick="OnListTabClicked"
                           data-toggle="list" href="#list-properties" role="tab">
                            <span class="oi oi-cog"></span> Settings
                        </a>
                    }
                </div>
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col">
                <div class="tab-content" id="nav-tabContent">
                    <div class="tab-pane fade show active" id="list-overview" role="tabpanel" aria-labelledby="list-overview-list">
                        @if (!ShowAddItem)
                        {
                            <div class="row">
                                <div class="col-auto mr-auto">
                                    <button class="btn btn-primary" @onclick="(() => ShowAddItem = !ShowAddItem)">
                                        <span class="oi oi-plus"></span> Add Items
                                    </button>
                                </div>

                                @if (CurrentListHasChanged)
                                {
                                    <div class="col-auto">
                                        <button class="btn btn-primary" @onclick="OnSaveListChanges">
                                            @if (IsSavingList)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" />
                                                @(" Saving list...")

                                            }
                                            else
                                            {
                                                <span class="oi oi-circle-check" />
                                                @(" Save list")
                                            }
                                        </button>
                                    </div>
                                }
                            </div>
                            <AlertComponent Model="AddItemAlertModel" />

                        }
                        else
                        {
                            <AddItem ListId="@ShoppingListId" OnItemAdded="AddListItem" OnCancelPressed="(() => ShowAddItem = false)" />
                        }
                        <hr />
                        @if (CurrentList != null)
                        {
                            <div class="row">
                                <div class="col">
                                    <ItemTable List="@CurrentList" OnListChanged="@(()=>CurrentListHasChanged = true)" />
                                </div>
                            </div>
                        }
                    </div>
                    @if (IsOwner)
                    {
                        <div class="tab-pane fade" id="list-properties" role="tabpanel" aria-labelledby="list-properties-list">
                            <h4>Properties</h4>
                            <hr />
                            @if (IsRemovingGroup)
                            {
                                <CustomSpinner>
                                    Removing user group...
                                </CustomSpinner>
                            }
                            else
                            {
                                <AlertComponent Model="@PropertyAlertModel" />
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="card">
                                            <div class="card-body">
                                                <h5 class="card-title">Create new user group</h5>
                                                <p class="card-text">Create a new user group and automatically assign it to this list.</p>
                                                <button class="btn btn-primary" type="button" @onclick="CreateAndAssignUserGroup">Create</button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <AddGroupToList ShoppingListId="@ShoppingListId" AvailableGroups="@AvailableUserGroups"
                                                        OnGroupAssigned="InitAvailableGroups" />
                                    </div>
                                </div>
                                <hr />
                                <h5>Assigned groups</h5>
                                @if (CurrentList.UserGroups != null)
                                {
                                    <table class="table">
                                        <thead class="thead-light">
                                            <tr>
                                                <th>Name</th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (CurrentList.UserGroups.Count > 0)
                                            {
                                                @foreach (var group in CurrentList.UserGroups)
                                                {
                                                    <tr class="selectable-row">
                                                        <td @onclick="@(() => NavigateToUserGroupDetails(group.Id))">@group.Name</td>
                                                        <td>
                                                            <ContextMenu>
                                                                <ContextMenuItem OnClickCallback="@(() => OnRemoveGroup(group.Id))">
                                                                    Remove
                                                                </ContextMenuItem>
                                                            </ContextMenu>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                            else
                                            {
                                                <tr>
                                                    <td colspan="2" class="text-center">
                                                        No User Groups assigned
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                                <hr />
                                <div class="row">
                                    <div class="col-sm-6">
                                        <DeleteList ShoppingListId="@ShoppingListId" OnListDeleted="OnListDeleted" />
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public string ShoppingListId { get; set; }

    #region Properties
    private bool IsLoading;
    private bool IsSavingList;
    private bool ShowAddItem;

    private ShoppingList CurrentList;

    private bool IsOwner;
    private ShoppingUserModel currentUser;
    private bool CurrentListHasChanged = false;

    AlertComponentModel LoadingAlertModel = null;
    AlertComponentModel PropertyAlertModel = null;
    AlertComponentModel AddItemAlertModel = null;

    private bool IsRemovingGroup;
    private List<UserGroup> AvailableUserGroups;
    #endregion

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        LoadingAlertModel = null;

        await UpdateCurrentList();

        if (CurrentList == null)
        {
            LoadingAlertModel = AlertComponentModel.CreateErrorAlert("Error loading list",
                $"List with id {ShoppingListId} does not exist or it does not belong to you.");
        }
        else
        {
            currentUser = await CurrentUser.GetUserAsync();
            IsOwner = CurrentList.Owner.Id == currentUser.Id;
            if (IsOwner)
            {
                await InitAvailableGroups();
            }
        }

        IsLoading = false;
    }

    private void OnListDeleted()
    {
        NavigationManager.NavigateTo("/lists");
    }
    private async Task OnSortListByStore()
    {
        var sortByStoreModal = Modal.Show<SelectListSortStrategy>("How do you want to sort your list?");
        var result = await sortByStoreModal.Result;

        if (!result.Cancelled && result.Data != null)
        {
            IShoppingListSortStrategy sortStrategy = result.Data as IShoppingListSortStrategy;

            CurrentList = sortStrategy.Sort(CurrentList);

        }
    }
    private async Task UpdateCurrentList()
    {
        IsLoading = true;
        CurrentList = await ShoppingListRepo.GetAsync(ShoppingListId);
        CurrentListHasChanged = false;
        IsLoading = false;
    }

    private void AddListItem(ShoppingListItem item)
    {
        AddItemAlertModel = null;
        if (item != null)
        {
            var existingItem = CurrentList.Items.FirstOrDefault(i => i.ProductItemId == item.ProductItemId);
            if (existingItem != null)
            {
                existingItem.Amount = item.Amount;
            }
            else
            {
                CurrentList.Items.Add(item);
            }
        }
        else
        {
            AddItemAlertModel = AlertComponentModel.CreateErrorAlert("Could not add item");
        }
        ShowAddItem = false;
    }

    private async Task OnSaveListChanges()
    {
        IsSavingList = true;
        var result = await ShoppingListRepo.UpdateAsync(CurrentList.Id, CurrentList);
        if (result != null)
        {
            CurrentListHasChanged = false;
        }
        IsSavingList = false;
    }

    private async Task InitAvailableGroups()
    {
        CurrentList.UserGroups = await UserGroupShoppingListsRepo.GetUserGroupsOfShoppingListAsync(ShoppingListId);
        var groupIds = CurrentList.UserGroups.Select(x => x.Id).ToList();
        AvailableUserGroups = (await UserGroupRepo.GetAllAsync())
            .Where(x => !groupIds.Contains(x.Id))
            .ToList();
    }

    private void OnListTabClicked()
    {
        PropertyAlertModel = null;
    }

    private async Task OnRemoveGroup(string groupId)
    {
        IsRemovingGroup = true;
        var assignment = new UserGroupShoppingList()
        {
            ShoppingListId = ShoppingListId,
            UserGroupId = groupId
        };

        var result = await UserGroupShoppingListsRepo.DeleteAsync(assignment);

        await InitAvailableGroups();

        IsRemovingGroup = false;
    }

    private void CreateAndAssignUserGroup()
    {
        NavigationManager.NavigateTo($"/groups/create/{ShoppingListId}");
    }

    private void NavigateToUserGroupDetails(string userGroupId)
    {
        NavigationManager.NavigateTo($"/groups/details/{userGroupId}");
    }
}
