@page "/lists"
@inject NavigationManager NavigationManager
@inject IShoppingLists ShoppingListRepo
@inject ICurrentUserProvider CurrentUserProvider
@attribute [Authorize]

<h3>Shopping lists</h3>
<hr />
<div class="row">
    @if (CanCreateStandard)
    {
        <div class="col">
            <button class="btn btn-primary" type="button" @onclick="CreateStandardList">
                <span class="oi oi-calendar" />New standard
            </button>
        </div>
    }
    <div class="col">
        <button class="btn btn-primary" type="button" @onclick="NavigateToCreatePage">
            <span class="oi oi-plus" /> New custom
        </button>
    </div>
</div>
<hr />
@if (IsLoading)
{
    <div class="row">
        <div class="col">
            <CustomSpinner>
                Loading shopping lists...
            </CustomSpinner>
        </div>
    </div>
}
else
{
    <table class="table table-sm">
        <thead class="thead-light">
            <tr>
                <th></th>
                <th>Name</th>
                <th>Date</th>
                <th>Items</th>
            </tr>
        </thead>
        <tbody>
            @if (_shoppingLists != null && _shoppingLists.Count > 0)
            {
                @foreach (var list in _shoppingLists)
                {
                    var opacity = (list.Items.Count > 0 && list.Items.All(i => i.Done)) ? "1" : "0";
                    <tr class="selectable-row" @onclick="@(()=>NavigateToDetails(list.Id))">
                        <th>
                            <span style="opacity:@opacity" class="oi oi-circle-check table-check-status">
                            </span>
                        </th>
                        <td>@list.Name</td>
                        <td>@list.ListDate.ToString("dd.MM")</td>
                        <td>@list.Items.Count</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4" class="text-center">No shopping lists available</td>
                </tr>
            }
        </tbody>
    </table>

}


@code {
    private bool IsLoading = false;
    private List<ShoppingList> _shoppingLists = new List<ShoppingList>();
    ShoppingUserModel currentUser = new ShoppingUserModel();
    private bool CanCreateStandard = false;
    private bool ListForTodayExists = false;

    protected async override Task OnInitializedAsync()
    {
        IsLoading = true;

        currentUser = await CurrentUserProvider.GetUserAsync();

        _shoppingLists = (await ShoppingListRepo.GetAllAsync())
        .OrderByDescending(l => l.ListDate).ToList();
        ListForTodayExists = _shoppingLists.Any(l => l.ListDate.Date == DateTime.Now.Date);
        CanCreateStandard = !string.IsNullOrEmpty(currentUser.Settings.StandardUserGroupId) && !ListForTodayExists;

        IsLoading = false;
    }
    private void NavigateToDetails(string id)
    {
        NavigationManager.NavigateTo($"/lists/details/{id}");
    }
    private void NavigateToCreatePage()
    {
        NavigationManager.NavigateTo("/lists/create");
    }
    private void CreateStandardList()
    {
        NavigationManager.NavigateTo($"lists/create/{currentUser.Settings.StandardUserGroupId}/true");
    }
}
