@page "/lists/create"
@page "/lists/create/{groupid}"
@page "/lists/create/{groupid}/{standard:bool}"

@inject IShoppingLists ShoppingListRepo
@inject NavigationManager NavigationManager
@inject IUserGroupShoppingLists GroupListAssignments
@inject IUserGroupRepository UserGroupRepo
@attribute [Authorize]

<h3>Create List</h3>
<p>
    Create new shopping list.<br />
</p>
<hr />
@if (IsLoading)
{
    <div class="row">
        <div class="col">
            <CustomSpinner>
                Loading data...
            </CustomSpinner>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col">
            <AlertComponent Model="@AlertData" />
        </div>
    </div>
    @if (!Standard)
    {
    <div class="row">
        <div class="col">
            @if (IsSaving)
            {
                <CustomSpinner>
                    Creating shopping list...
                </CustomSpinner>
            }
            else
            {
                <EditForm EditContext="editContext" OnSubmit="HandleSubmit">
                    <ValidationSummary />
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="dateInput">Date</label>
                        <InputDate @bind-Value="formData.ListDate" id="dateInput" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="nameInput">Name</label>
                        <InputText @bind-Value="formData.Name" id="nameInput" class="form-control" />
                    </div>
                    @if (string.IsNullOrEmpty(GroupId))
                    {
                        @if (_availableUserGroups != null && _availableUserGroups.Count > 0)
                        {
                            <div class="form-group">
                                <label for="group-select">User Group</label>
                                <InputSelect id="group-select" class="form-control" @bind-Value="@targetGroupId">
                                    <option value="">Choose Group...</option>
                                    @foreach (var group in _availableUserGroups)
                                    {
                                        <option value="@group.Id">@group.Name</option>
                                    }
                                </InputSelect>
                            </div>
                        }
                    }
                    <button type="submit" class="btn btn-primary">Create</button>
                </EditForm>
            }
        </div>
    </div>
        }
    }


@code {
    [Parameter]
    public string GroupId { get; set; }
    [Parameter]
    public bool Standard { get; set; }

    private bool IsSaving = false;
    private bool IsLoading = false;

    private AlertComponentModel AlertData;

    private ShoppingList formData = new ShoppingList();
    private EditContext editContext;

    private List<UserGroup> _availableUserGroups;


    private string targetGroupId;

    protected async override Task OnInitializedAsync()
    {
        IsLoading = true;
        targetGroupId = GroupId;

        if (Standard)
        {
            if (string.IsNullOrEmpty(targetGroupId))
            {
                AlertData = AlertComponentModel.CreateErrorAlert("Could not created standard list", "UserGroup Id is missing");
            }
            else
            {
                await CreateListWorkflow(GetStandardList());
            }
        }
        else
        {
            formData = GetStandardList();
            editContext = new EditContext(formData);
            if (string.IsNullOrEmpty(targetGroupId))
            {
                _availableUserGroups = await UserGroupRepo.GetAllAsync();
            }
        }
        IsLoading = false;
    }

    private async Task HandleSubmit()
    {
        AlertData = null;

        if (editContext.Validate())
        {
            IsSaving = true;

            await CreateListWorkflow(formData);

            IsSaving = false;
        }

    }

    private async Task CreateListWorkflow(ShoppingList data)
    {
        var list = await CreateShoppingList(data);
        if (list == null)
        {
            SetCreateErrorList();
        }
        else
        {
            if (!string.IsNullOrEmpty(targetGroupId))
            {
                await AssignListToUserGroup(list.Id, targetGroupId);
            }
            NavigateToList(list.Id);
        }
    }

    private async Task AssignListToUserGroup(string listId, string userGroupId)
    {
        var result = await GroupListAssignments.CreateAsync(new UserGroupShoppingList
        {
            ShoppingListId = listId,
            UserGroupId = userGroupId
        });
    }

    private async Task<ShoppingList> CreateShoppingList(ShoppingList listData)
    {
        ShoppingList createdList = await ShoppingListRepo.CreateAsync(listData);
        return createdList;
    }

    private void NavigateToList(string id)
    {
        NavigationManager.NavigateTo($"/lists/details/{id}");
    }

    private ShoppingList GetStandardList()
    {
        return new ShoppingList()
        {
            ListDate = DateTime.Now,
            Name = $"List of {DateTime.Now.ToString("dd.MM.yy")}"
        };
    }
    private void SetCreateErrorList()
    {
        AlertData = AlertComponentModel.CreateErrorAlert("Could not create list", $"This could be because you already have a list with same properties");
    }
}
