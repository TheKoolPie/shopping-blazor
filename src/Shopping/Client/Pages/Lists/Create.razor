@page "/lists/create"
@page "/lists/create/{groupid}"

@inject IShoppingLists ShoppingListRepo
@inject NavigationManager NavigationManager
@inject IUserGroupShoppingLists GroupListAssignments
@inject IUserGroupRepository UserGroupRepo
@attribute [Authorize]

<h3>Create List</h3>
<p>
    Create new shopping list.<br />
</p>
<hr />
@if (IsLoading)
{
    <div class="row">
        <div class="col">
            <CustomSpinner>
                Loading data...
            </CustomSpinner>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col">
            <AlertComponent Model="@AlertData" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            @if (IsSaving)
            {
                <CustomSpinner>
                    Creating shopping list...
                </CustomSpinner>
            }
            else
            {
                <EditForm EditContext="editContext" OnSubmit="HandleSubmit">
                    <ValidationSummary />
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="dateInput">Date</label>
                        <InputDate @bind-Value="list.ListDate" id="dateInput" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="nameInput">Name</label>
                        <InputText @bind-Value="list.Name" id="nameInput" class="form-control" />
                    </div>
                    @if (string.IsNullOrEmpty(GroupId))
                    {
                        @if (_availableUserGroups != null && _availableUserGroups.Count > 0)
                        {
                            <div class="form-group">
                                <label for="group-select">User Group</label>
                                <InputSelect id="group-select" class="form-control" @bind-Value="@_addGroupId">
                                    <option value="">Choose Group...</option>
                                    @foreach (var group in _availableUserGroups)
                                                    {
                                        <option value="@group.Id">@group.Name</option>
                                                    }
                                </InputSelect>
                            </div>
                        }
                    }
                    <button type="submit" class="btn btn-primary">Create</button>
                </EditForm>
            }
        </div>
    </div>
}


@code {
    [Parameter]
    public string GroupId { get; set; }

    private bool IsSaving = false;
    private bool IsLoading = false;


    private AlertComponentModel AlertData;
    private ShoppingList list = new ShoppingList()
    {
        ListDate = DateTime.Now,
        Name = $"List of {DateTime.Now.ToString("dd.MM.yy")}"
    };
    private EditContext editContext;

    private ShoppingList createdItem;

    private List<UserGroup> _availableUserGroups;

    private string _addGroupId;

    protected async override Task OnInitializedAsync()
    {
        IsLoading = true;
        _addGroupId = GroupId;
        editContext = new EditContext(list);
        if (string.IsNullOrEmpty(_addGroupId))
        {
            _availableUserGroups = await UserGroupRepo.GetAllAsync();
        }
        IsLoading = false;
    }

    private async Task HandleSubmit()
    {
        AlertData = null;
        createdItem = null;

        if (editContext.Validate())
        {
            IsSaving = true;
            createdItem = await ShoppingListRepo.CreateAsync(list);
            if (createdItem == null)
            {
                AlertData = AlertComponentModel.CreateErrorAlert("Could not create list", $"This could be because you already have a list called '{list.Name}'");
            }
            else
            {
                if (!string.IsNullOrEmpty(_addGroupId))
                {
                    var result = await GroupListAssignments.CreateAssignmentAsync(new UserGroupShoppingList()
                    {
                        ShoppingListId = createdItem.Id,
                        UserGroupId = _addGroupId
                    });
                }
                NavigateToLastCreatedList();
            }
            IsSaving = false;
        }

    }
    private void NavigateToLastCreatedList()
    {
        NavigationManager.NavigateTo($"/lists/details/{createdItem.Id}");
    }
}
