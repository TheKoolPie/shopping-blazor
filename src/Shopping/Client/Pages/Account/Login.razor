@page "/account/login"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<h1>Login</h1>

<div class="row">
    <div class="col">
        <AlertComponent Model="LoginAlertModel" />
    </div>
</div>

<div class="card">
    <div class="card-body">
        @if (IsLoggingIn) 
        {
            <CustomSpinner>
                Logging in...
            </CustomSpinner>
        }
        else
        {
            <h5 class="card-title">Please enter your details</h5>
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="email">User name or Email address</label>
                    <InputText Id="email" Class="form-control" @bind-Value="loginModel.LoginName" />
                    <ValidationMessage For="@(() => loginModel.LoginName)" />
                </div>
                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText Id="password" type="password" Class="form-control" @bind-Value="loginModel.Password" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>
                <button type="submit" class="btn btn-primary">Submit</button>
            </EditForm>
        }
    </div>
</div>

@code {

    private LoginModel loginModel = new LoginModel();
    private bool IsLoggingIn;
    private string returnUrl = "";

    AlertComponentModel LoginAlertModel;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var _returnUrl))
        {
            returnUrl = _returnUrl.ToString();
        }
    }

    private async Task HandleLogin()
    {
        LoginAlertModel = null;
        IsLoggingIn = true;

        var result = await AuthService.Login(loginModel);

        string target = string.IsNullOrEmpty(returnUrl) ? "/" : returnUrl;

        if (result.IsSuccessful)
        {
            NavigationManager.NavigateTo(target);
        }
        else
        {
            LoginAlertModel = AlertComponentModel.CreateErrorAlert("Could not log in", result.CompleteErrorMessage);
        }
        IsLoggingIn = false;
    }

}