@page "/"

@using Shopping.Shared
@inject HttpClient Http

<div class="row">
    <div class="col-md-4">
        <h3>Einkaufsliste @shoppingList.Date.ToString("dd.MM.yy")</h3>
    </div>
</div>

<EditForm EditContext="@editContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="col">
            <label>
                Produkt
                <InputText @bind-Value="newItem.Name" class="form-control" />
            </label>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <label>
                Anzahl
                <InputText @bind-Value="newItem.Amount" class="form-control" />
            </label>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <label>
                Einheit
                <InputSelect @bind-Value="newItem.AmountType" class="form-control">
                    @foreach (AmountType val in Enum.GetValues(typeof(AmountType)))
                    {
                        <option value="@val">@val.GetDescription()</option>
                    }
                </InputSelect>
            </label>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button type="submit" disabled="@formInvalid" class="btn btn-primary">
                <span class="oi oi-plus" aria-hidden="true"></span>
                Hinzufügen
            </button>
        </div>
    </div>
</EditForm>
<hr />
<div class="container">
    <div class="row">
        @if (shoppingList.Items.Count == 0)
        {
            <div class="col">
                Keine Daten gefunden....
            </div>
        }
        else
        {
            foreach (var item in shoppingList.Items)
            {
                <div class="col">
                    <div class="card product-card @item.DoneCssClassName" style="width:16rem;"
                         @onclick="@(e=>CheckItem(item.Id))">
                        <div class="card-body">
                            <h5 class="card-title">@item.Name</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@item.Amount @(((AmountType)item.AmountType).GetDescription())</h6>
                            @*<button class="btn btn-dark" @onclick="@(e=>CheckItem(item.Id))">
                                <span class="oi oi-check" /> Erledigt
                            </button>*@
                            <button class="btn btn-light" @onclick="@(e=>Remove(item.Id))">
                                <span class="oi oi-x" /> Löschen
                            </button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    private ShoppingList shoppingList = new ShoppingList();
    private bool formInvalid = true;
    private EditContext editContext;
    private ShoppingItem newItem = new ShoppingItem();

    protected override void OnInitialized()
    {
        editContext = new EditContext(newItem);
        editContext.OnFieldChanged += HandleFieldChanged;
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        formInvalid = !editContext.Validate();
        StateHasChanged();
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= HandleFieldChanged;
    }
    public void Remove(string id)
    {
        shoppingList.RemoveEntry(id);
    }
    public void CheckItem(string id)
    {
        shoppingList.ToggleDoneState(id);
    }
    private void HandleValidSubmit()
    {
        if (!shoppingList.Contains(newItem))
        {
            var copy = new ShoppingItem(newItem);
            shoppingList.AddEntry(copy);
        }
    }

}