@page "/store"

@inject IStoreRepository StoreRepo
@inject IStoreChainRepository StoreChainRepo
@inject NavigationManager NavigationManager


<h3>Store chains</h3>
<AuthorizeView>
    <Authorized>
        <div class="row">
            <div class="col">
                <button class="btn btn-primary" type="button" @onclick="@(()=>NavigationManager.NavigateTo("/store/create-chain"))">
                    <span class="oi oi-plus" /> Create Store chain
                </button>
            </div>
        </div>
    </Authorized>
</AuthorizeView>
<hr />
<div class="row">
    <div class="col">
        @if (IsLoading)
        {
            <CustomSpinner>
                Loading store chains...
            </CustomSpinner>
        }
        else
        {
            @if (DbStoreChains != null)
            {
                @if (DbStoreChains.Count > 0)
                {
                    <div class="row">
                        <div class="col">
                            <input type="search" class="form-control"
                                   @bind="StoreChainSearchInput" @bind:event="oninput"
                                   placeholder="Search for store...." />
                        </div>
                    </div>
                    <hr />
                }
                <table class="table table-sm">
                    <thead class="thead-light">
                        <tr class="selectable-row">
                            <th></th>
                            <th>€</th>
                            <th>Name</th>
                            <th><span class="oi oi-globe" /></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (LocalStoreChains.Count > 0)
                        {
                            @foreach (var chain in LocalStoreChains)
                            {
                                <tr class="selectable-row" @onclick="@(()=>OnStoreChainRowClicked(chain.StoreChainId))">
                                    <td></td>
                                    <td>@chain.PriceCategory.GetPriceCatString()</td>
                                    <td>@chain.Name</td>
                                    <td>@chain.Url</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td class="text-center" colspan="4">No store chains found</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        }
    </div>
</div>
<hr />
<h3>Stores</h3>
<AuthorizeView>
    <Authorized>
        <div class="row">
            <div class="col">
                <button class="btn btn-primary" type="button" @onclick="@(()=>NavigationManager.NavigateTo("/store/create-store"))">
                    <span class="oi oi-plus" /> Create Store
                </button>
            </div>
        </div>
    </Authorized>
</AuthorizeView>
<hr />
<div class="row">
    <div class="col">
        @if (IsLoading)
        {
            <CustomSpinner>
                Loading stores...
            </CustomSpinner>
        }
        else
        {
            @if (DbStores != null)
            {
                @if (DbStores.Count > 0)
                {
                    <div class="row">
                        <div class="col">
                            <input type="search" class="form-control"
                                   @bind="SearchInput" @bind:event="oninput"
                                   placeholder="Search for store...." />
                        </div>
                    </div>
                    <hr />
                }
                <table class="table table-sm">
                    <thead class="thead-light">
                        <tr class="selectable-row">
                            <th></th>
                            <th>€</th>
                            <th>Name</th>
                            <th>Street</th>
                            <th>City</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (LocalStores.Count > 0)
                        {
                            @foreach (var store in LocalStores)
                            {
                                <tr class="selectable-row" @onclick="@(()=>OnRowClicked(store.StoreId))">
                                    <td></td>
                                    <td>@store.PriceCategory.GetPriceCatString()</td>
                                    <td>@store.Name</td>
                                    <td>@($"{store.Street}, {store.HouseNumber}")</td>
                                    <td>@store.City</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td class="text-center" colspan="7">No stores found</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        }

    </div>
</div>
@code {
    private bool IsLoading;
    private List<Store> DbStores;
    private List<Store> LocalStores;

    private List<StoreChain> DbStoreChains;
    private List<StoreChain> LocalStoreChains;

    string _storeChainSearchInput;
    string StoreChainSearchInput
    {
        get => _storeChainSearchInput;
        set
        {
            _storeChainSearchInput = value;
            OnSearchStoreChainInputChanged();

        }
    }

    string _searchInput;
    string SearchInput
    {
        get => _searchInput;
        set
        {
            _searchInput = value;
            OnSearchInputChanged();
        }
    }

    protected async override Task OnInitializedAsync()
    {
        IsLoading = true;

        DbStores = await StoreRepo.GetAllAsync();
        DbStoreChains = await StoreChainRepo.GetAllAsync();
        foreach (var store in DbStores)
        {
            if (!string.IsNullOrEmpty(store.StoreChainId))
            {
                store.StoreChain = DbStoreChains.FirstOrDefault(s => s.StoreChainId == store.StoreChainId);
            }
        }
        foreach (var chain in DbStoreChains)
        {
            chain.Stores = DbStores
                .Where(s => !string.IsNullOrEmpty(s.StoreChainId) && s.StoreChainId == chain.StoreChainId)
                .ToList();
        }
        LocalStores = new List<Store>(DbStores);
        LocalStoreChains = new List<StoreChain>(DbStoreChains);

        IsLoading = false;
    }

    private void OnSearchStoreChainInputChanged()
    {
        LocalStoreChains = new List<StoreChain>(DbStoreChains);
        if (!string.IsNullOrEmpty(_storeChainSearchInput))
        {
            LocalStoreChains = LocalStoreChains
                .Where(s =>
                    s.Name.Contains(_storeChainSearchInput, StringComparison.InvariantCultureIgnoreCase)
                )
                .ToList();
        }
    }

    private void OnSearchInputChanged()
    {
        LocalStores = new List<Store>(DbStores);
        if (!string.IsNullOrEmpty(_searchInput))
        {
            LocalStores = LocalStores
                .Where(s =>
                    s.Name.Contains(_searchInput, StringComparison.InvariantCultureIgnoreCase) ||
                    s.Street.Contains(_searchInput, StringComparison.InvariantCultureIgnoreCase) ||
                    s.HouseNumber.Contains(_searchInput, StringComparison.InvariantCultureIgnoreCase) ||
                    s.PostalCode.ToString().Contains(_searchInput, StringComparison.InvariantCultureIgnoreCase) ||
                    s.City.Contains(_searchInput, StringComparison.InvariantCultureIgnoreCase)
                )
                .ToList();
        }
    }
    private void OnRowClicked(string id)
    {
        NavigationManager.NavigateTo($"/store/details-store/{id}");
    }
    private void OnStoreChainRowClicked(string id)
    {
        NavigationManager.NavigateTo($"/store/details-chain/{id}");
    }
}
