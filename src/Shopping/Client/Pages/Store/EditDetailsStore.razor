@page "/store/details-store/{id}"

@inject IStoreRepository StoreRepo
@inject IStoreChainRepository StoreChainRepo
@inject IStoreProductCatRepository StoreProductCatRepo
@inject IProductCategories ProductCatRepo

@attribute [Authorize]

<div class="row">
    <div class="col">
        @if (IsLoading)
        {
            <CustomSpinner>
                Loading store data...
            </CustomSpinner>
        }
        else
        {
            <AlertComponent Model="@ErrorModel" />
            <CreateStoreForm ViewModel="vm"
                             StoreProductCatAssignments="ProductCatAssignments"
                             OnValidSubmit="HandleValidSubmit" />
        }
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    bool IsLoading;
    bool IsEdit;

    AlertComponentModel ErrorModel;

    Store CurrentStore;
    StoreCreateViewModel vm;
    List<StoreProductCategory> ProductCatAssignments;

    protected async override Task OnInitializedAsync()
    {
        IsLoading = true;

        if (!string.IsNullOrEmpty(Id))
        {
            CurrentStore = await StoreRepo.GetAsync(Id);
            if (!string.IsNullOrEmpty(CurrentStore.StoreChainId))
            {
                CurrentStore.StoreChain = await StoreChainRepo.GetAsync(CurrentStore.StoreChainId);
            }
            ProductCatAssignments = new List<StoreProductCategory>();
            ProductCatAssignments = await StoreProductCatRepo.GetAssignmentsByStoreIdAsync(CurrentStore.StoreId);
            if (ProductCatAssignments.Count == 0)
            {
                var DbProductCategories = await ProductCatRepo.GetAllAsync();
                foreach (var category in DbProductCategories.OrderBy(c => c.Name))
                {
                    var assignment = new StoreProductCategory
                    {
                        ProductCategoryId = category.Id
                    };
                    ProductCatAssignments.Add(assignment);
                }
            }
            else
            {
                ProductCatAssignments = ProductCatAssignments.OrderBy(a => a.RankingValue).ToList();
            }
            vm = CurrentStore.ToCreateViewModel();
        }
        else
        {
            ErrorModel = AlertComponentModel.CreateErrorAlert("No ID provided");
        }

        IsLoading = false;
    }

    private async Task HandleValidSubmit()
    { }
}
