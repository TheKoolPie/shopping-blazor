@page "/groups/details/{id}"

@attribute [Authorize]

@inject IUserGroupRepository UserGroups
@inject IUserRepository UserRepository
@inject ICurrentUserProvider CurrentUser

@if (IsLoading)
{
    <div class="row">
        <div class="col"><strong>Loading...</strong></div>
    </div>
}
else
{
    <h3>Details of @userGroup.Name</h3>
    <hr />

    <div class="row">
        <div class="col">
            <EditForm Model="@input" OnSubmit="HandleAddUser">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="nameInput">Email address or username</label>
                    <InputText id="nameInput" class="form-control" @bind-Value="input.UserNameOrEmail" />
                </div>
                <button class="btn btn-primary">Add User</button>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private bool IsLoading;
    private bool IsSaving;

    private bool IsOwner = false;

    private InputModel input = new InputModel();
    private UserGroup userGroup = null;


    protected async override Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            userGroup = await UserGroups.GetAsync(Id);
        }
        catch(Exception e)
        {
            Console.WriteLine(e);
        }

        var currentUser = await CurrentUser.GetUserAsync();
        IsOwner = userGroup.Owner.Id == currentUser.Id;

        IsLoading = false;
    }

    private async Task HandleAddUser()
    {

    }

    public class InputModel
    {
        [System.ComponentModel.DataAnnotations.Required]
        public string UserNameOrEmail { get; set; }
    }
}
